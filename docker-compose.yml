# docker-compose v 3.7 supports multi-stage build
version: '3.7'

services:
  # The main service is responsible for running our application. 
  main:
    # container_name tells docker-compose that we will be using the name main to refer to this service in various docker-compose commands.
    container_name: main
    build:
      # context tells Docker which files should be sent to the Docker daemon
      context: .
      # Docker will now only build the first part of our Dockerfile and completely ignore the production part of our build (it will stop before the second FROM statement).
      target: development
    # A volume is a way to mount a host directory in a container
    volumes:
      # mounts our current directory (.) inside the Docker container (/usr/src/app). 
      # This way, when we change a file on our host machine, the file will also be changed in the container. 
      # Now the process, while still running inside the container, will keep restarting the application on each file change.
      - .:/usr/src/app
      # The second volume is a hack. By mounting the first volume in the container, we could accidentally also override the node_modules directory with the one we have locally. Developers usually have node_modules on their host machine due to the dev tools Visual Studio Code relies on — packages such as eslint or @types, for example.
      # Therefore, use an anonymous volume that will prevent the node_modules existing in the container to ever be overridden.
      - /usr/src/app/node_modules
    ports:
      # Docker’s container has its own network, so by using ports, we are exposing them to be available to our host machine
      # The syntax is HOST_PORT:CONTAINER_PORT
      # The ${SERVER_PORT} syntax means that the value will be retrieved from the environment variables.
      - ${SERVER_PORT}:${SERVER_PORT}
      # 9229 port for debugging purposes
      - 9229:9229
    # command: npm run start:dev
    command: npm run start:debug
    env_file:
      - .env
    # tell docker-compose to use this network in this particular service. Note: The network is defined at the bottom of the file
    networks:
      - webnet
    depends_on:
      - redis
      - postgres
  redis:
    container_name: redis
    image: redis:5
    networks:
      - webnet
  postgres:
    container_name: postgres
    image: postgres:12
    networks:
      - webnet
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_NAME}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      # pgdata is a named volume defined at the bottom of the file
      # By using a named value, we make sure that the data stays the same even when the container is removed. It will stay there until we delete the volume ourselves.
      # Also, it’s always good to know where we keep the data instead of storing it at some random location in the container.
      - pgdata:/var/lib/postgresql/data
  migration:
    container_name: migration
    build:
      context: .
    # command: 
    #   - /bin/bash
    #   - -c
    #   - |
    #     npm install
    #     npm run migration:up

    # To run migrations on docker-compose, we had to move @types/node, typescript and ts-node from devDependencies to dependecies
    # TODO: Find a way to run the migrations without needing those dev dependencies
    command: npm run migration:run
    links:
      - postgres
    depends_on:
      - postgres
    env_file:
      - .env
networks:
  webnet:
volumes:
  pgdata:


# To run:
# ! docker-compose up

# if you get a port already bound error do:
# ! sudo systemctl stop postgresql 
# to temporarily stop local postgres

# Note: When using networks with docker-compose you should use the name of the service as you hostname.
# so in this case the hostname should be postgres and not localhost

# To access the database from your local terminal:
# const conString = "postgres://YourUserName:YourPassword@YourHostname:5432/YourDatabaseName";
# psql postgresql://DB_USERNAME:DB_PASSWORD@localhost:5432/DB_NAME
# Eg psql postgresql://kevin:kevinkimaru@localhost:5432/postgres

# Anonymous volumes aren’t removed until their parent container is removed.
# Node modules will therefore not update even after an npm install.
# To solve this
# ! docker-compose up --build -V
# The --build parameter will make sure the npm install is run (during the build process), and the -V argument will remove any anonymous volumes and create them again.